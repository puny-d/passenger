/*
 *  Phusion Passenger - https://www.phusionpassenger.com/
 *  Copyright (c) 2010-2017 Phusion Holding B.V.
 *
 *  "Passenger", "Phusion Passenger" and "Union Station" are registered
 *  trademarks of Phusion Holding B.V.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

/*
 * DirConfig/AutoGeneratedStruct.h is automatically generated from DirConfig/AutoGeneratedStruct.h.cxxcodebuilder,
 * using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
 * Edits to DirConfig/AutoGeneratedStruct.h will be lost.
 *
 * To update DirConfig/AutoGeneratedStruct.h:
 *   rake apache2
 *
 * To force regeneration of DirConfig/AutoGeneratedStruct.h:
 *   rm -f src/apache2_module/DirConfig/AutoGeneratedStruct.h
 *   rake src/apache2_module/DirConfig/AutoGeneratedStruct.h
 */

struct AutoGeneratedDirConfig {

	/*
	 * Whether to support encoded slashes in the URL
	 */
	Threeway allowEncodedSlashes;

	/*
	 * Whether to enable extra response buffering inside Apache.
	 */
	Threeway bufferResponse;

	/*
	 * Whether to buffer file uploads.
	 */
	Threeway bufferUpload;

	/*
	 * Enable or disable Phusion Passenger.
	 */
	Threeway enabled;

	/*
	 * Allow Apache to handle error response.
	 */
	Threeway errorOverride;

	/*
	 * Whether to display friendly error pages when something goes wrong.
	 */
	Threeway friendlyErrorPages;

	/*
	 * Enable or disable Passenger's high performance mode.
	 */
	Threeway highPerformance;

	/*
	 * Whether to load environment variables from the shell before running the application.
	 */
	Threeway loadShellEnvvars;

	/*
	 * Whether to resolve symlinks in the DocumentRoot path
	 */
	Threeway resolveSymlinksInDocumentRoot;

	/*
	 * Whether to show the Phusion Passenger version number in the X-Powered-By header.
	 */
	Threeway showVersionInHeader;

	/*
	 * Whether to enable sticky sessions.
	 */
	Threeway stickySessions;

	/*
	 * The cookie name to use for sticky sessions.
	 */
	Threeway stickySessionsCookieName;

	/*
	 * Force Passenger to believe that an application process can handle the given number of concurrent requests per process
	 */
	int forceMaxConcurrentRequestsPerProcess;

	/*
	 * Minimum user id starting from which entering LVE and CageFS is allowed.
	 */
	int lveMinUid;

	/*
	 * The maximum number of simultaneously alive application instances a single application may occupy.
	 */
	int maxInstancesPerApp;

	/*
	 * The maximum number of seconds that a preloader process may be idle before it is shutdown.
	 */
	int maxPreloaderIdleTime;

	/*
	 * The maximum number of queued requests.
	 */
	int maxRequestQueueSize;

	/*
	 * The maximum number of requests that an application instance may process.
	 */
	int maxRequests;

	/*
	 * The minimum number of application instances to keep when cleaning idle instances.
	 */
	int minInstances;

	/*
	 * A timeout for application startup.
	 */
	int startTimeout;

	/*
	 * The environment under which applications are run.
	 */
	StaticString appEnv;

	/*
	 * Application process group name.
	 */
	StaticString appGroupName;

	/*
	 * The application's root directory.
	 */
	StaticString appRoot;

	/*
	 * Force specific application type.
	 */
	StaticString appType;

	/*
	 * The group that Ruby applications must run as.
	 */
	StaticString group;

	/*
	 * Settings file for (non-bundled) Meteor apps.
	 */
	StaticString meteorAppSettings;

	/*
	 * The Node.js command to use.
	 */
	StaticString nodejs;

	/*
	 * The Python interpreter to use.
	 */
	StaticString python;

	/*
	 * The directory in which Passenger should look for restart.txt.
	 */
	StaticString restartDir;

	/*
	 * The Ruby interpreter to use.
	 */
	StaticString ruby;

	/*
	 * The spawn method to use.
	 */
	StaticString spawnMethod;

	/*
	 * Force specific startup file.
	 */
	StaticString startupFile;

	/*
	 * The user that Ruby applications must run as.
	 */
	StaticString user;

	/*
	 * Declare the given base URI as belonging to a web application.
	 */
	std::set<std::string> baseURIs;
};
