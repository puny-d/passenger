#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2017 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    Config/AutoGeneratedSetterFuncs.cpp is automatically generated from Config/AutoGeneratedSetterFuncs.cpp.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to Config/AutoGeneratedSetterFuncs.cpp will be lost.

    To update Config/AutoGeneratedSetterFuncs.cpp:
      rake apache2

    To force regeneration of Config/AutoGeneratedSetterFuncs.cpp:
      rm -f src/apache2_module/Config/AutoGeneratedSetterFuncs.cpp
      rake src/apache2_module/Config/AutoGeneratedSetterFuncs.cpp
  }

  separator

  filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS).each do |option|
    function(setter_function_declaration_for(option)) do
      setter_function_body_for(option)
    end
  end
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option.fetch(:field, true).nil? ||
      option[:field].to_s =~ /\./ ||
      option[:function]
  end
end

def struct_field_for(option)
  if option.has_key?(:field)
    option[:field]
  else
    result = option[:name].sub(/^Passenger/, '')
    result[0] = result[0..0].downcase
    result
  end
end

def min_value_for(option)
  option[:min_value] || 0
end

def function_name_for(option)
  function_name = option[:name].gsub(/[A-Z]/) do |letter|
    "_" + letter[0..0].downcase
  end
  "cmd#{function_name}"
end

def setter_function_declaration_for(option)
  func_name = function_name_for(option)
  "static const char *#{func_name}(cmd_parms *cmd, void *pcfg, const char *arg)"
end

def setter_function_body_for(option)
  if option[:obsolete]
    obsoletion_message = option[:obsoletion_message] ||
      "The '#{option[:name]}' option is obsolete. Please remove this option from your configuration file."
    obsoletion_message = "WARNING: #{obsoletion_message}\n"
    add_code %Q{
      fprintf(stderr, #{obsoletion_message.inspect});
      fflush(stderr);
      return NULL;
    }
    return
  end

  field_reference = struct_field_for(option)
  if option.fetch(:struct, :dir) == :dir
    add_code %Q{
      DirConfig *config = (DirConfig *) pcfg;
    }
    field_reference = "config->#{field_reference}"
  else
    field_reference = "serverConfig.#{field_reference}"
  end

  if option[:type] == :string
    add_code %Q{
      #{field_reference} = arg;
      return NULL;
    }
  elsif option[:type] == :integer
    add_code %q[
      char *end;
      long result;

      result = strtol(arg, &end, 10);
      if (*end != '\0') {
        string message = "Invalid number specified for ";
        message.append(cmd->directive->directive);
        message.append(".");

        char *messageStr = (char *) apr_palloc(cmd->temp_pool,
          message.size() + 1);
        memcpy(messageStr, message.c_str(), message.size() + 1);
        return messageStr;
    ]

    if option[:min_value]
      add_code %Q[
        } else if (result < #{option[:min_value]}) {
          string message = "Value for ";
          message.append(cmd->directive->directive);
          message.append(" must be greater than or equal to #{option[:min_value]}.");

          char *messageStr = (char *) apr_palloc(cmd->temp_pool,
            message.size() + 1);
          memcpy(messageStr, message.c_str(), message.size() + 1);
          return messageStr;
      ]
    end

    add_code %Q[
      } else {
        #{field_reference} = (int) result;
        return NULL;
      }
    ]
  elsif option[:type] == :flag
    add_code %Q{
      #{field_reference} =
        arg ?
        ENABLED :
        DISABLED;
      return NULL;
    }
  elsif option[:type] == :string_set
    add_code %Q{
      #{field_reference}.insert(arg);
      return NULL;
    }
  else
    raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
  end
end

main
